// SPDX-License-Identifier: MPL-2.0

using AssCS.Utilities;

namespace AssCS.IO;

/// <summary>
/// Write an ass document as an ass file
/// </summary>
/// <param name="document">Document to write</param>
/// <param name="consumer">Program or library requesting the write</param>
public class AssWriter(Document document, ConsumerInfo consumer) : FileWriter
{
    private const string EVENT_FORMAT_V400P =
        "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text";
    private const string STYLE_FORMAT_V400P =
        "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, "
        + "BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding";

    /// <inheritdoc/>
    public override bool Write(TextWriter writer, bool export = false)
    {
        WriteHeader(writer);
        WriteScriptInfo(writer);
        if (!export)
            WriteGarbage(writer);
        WriteStyles(writer);
        WriteAttachments(writer);
        WriteEvents(writer);
        if (!export)
            WriteExtradata(writer);
        return true;
    }

    private void WriteHeader(TextWriter writer)
    {
        writer.WriteLine("[Script Info]");
        writer.WriteLine($"; Script generated by {consumer.Name} {consumer.Version} [AssCS]");
        writer.WriteLine($"; {consumer.Website}");
    }

    private void WriteScriptInfo(TextWriter writer)
    {
        foreach (var info in document.ScriptInfoManager.GetAll())
        {
            writer.WriteLine($"{info.Key}: {info.Value}");
        }
        writer.WriteLine();
    }

    private void WriteGarbage(TextWriter writer)
    {
        if (document.GarbageManager.Count == 0)
            return;

        writer.WriteLine("[Aegisub Project Garbage]");
        foreach (var prop in document.GarbageManager.GetAll())
        {
            writer.WriteLine($"{prop.Name}: {prop.Value}");
        }
        writer.WriteLine();
    }

    private void WriteStyles(TextWriter writer)
    {
        string header = document.Version switch
        {
            AssVersion.V400 => "[V4 Styles]",
            AssVersion.V400P => "[V4+ Styles]",
            AssVersion.V400PP => "[V4++ Styles]",
            _ => "[V4+ Styles]",
        };
        writer.WriteLine(header);
        writer.WriteLine(STYLE_FORMAT_V400P); // TODO: Style versioning

        foreach (var style in document.StyleManager.Styles)
        {
            writer.WriteLine(style.AsAss()); // TODO: Style versioning
        }
        writer.WriteLine();
    }

    private void WriteAttachments(TextWriter writer)
    {
        // TODO: Attachments Manager
        // writer.WriteLine();
    }

    private void WriteEvents(TextWriter writer)
    {
        writer.WriteLine("[Events]");
        writer.WriteLine(EVENT_FORMAT_V400P); // TODO: Event versioning

        foreach (var @event in document.EventManager.Events)
        {
            writer.WriteLine(@event.AsAss());
        }

        writer.WriteLine();
    }

    /// <summary>
    /// AssCS Extradata is written with the format char <c>b</c>, and the value is always base64 encoded.
    /// </summary>
    /// <param name="writer">TextWriter writing the file</param>
    /// <remarks>
    /// This breaks compatibility with Aegisub Extradata, which uses <c>e</c> and <c>u</c> for Inline and UU encoding.
    /// </remarks>
    private void WriteExtradata(TextWriter writer)
    {
        if (document.ExtradataManager.Get().Count == 0)
            return;

        writer.WriteLine("[Aegisub Extradata]");

        foreach (var extra in document.ExtradataManager.Get())
        {
            writer.WriteLine(
                $"Data: {extra.Id},{StringEncoder.InlineEncode(extra.Key)},b{StringEncoder.Base64Encode(extra.Value)}"
            );
        }
    }
}
